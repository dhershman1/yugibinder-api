exports.up = function (knex) {
  return knex.schema
    .createTable('roles', (table) => {
      table.uuid('id').primary().defaultTo(knex.raw('uuid_generate_v4()'))
      table.string('role_name', 50).unique().notNullable()
      table.specificType('permissions', 'text[]').defaultTo('{}')
    })
    .createTable('users', (table) => {
      table.string('auth0_id').primary().unique().notNullable()
      table.string('username').unique().notNullable()
      table.string('role').references('role_name').inTable('roles').defaultTo('user')
      table.timestamp('created_at').defaultTo(knex.fn.now())
      table.timestamp('updated_at').defaultTo(knex.fn.now())
    })
    .createTable('binders', (table) => {
      table.uuid('id').primary().defaultTo(knex.raw('uuid_generate_v4()'))
      table.string('name')
      table.text('description')
      table.string('thumbnail')
      table.timestamp('created_at').defaultTo(knex.fn.now())
      table.timestamp('updated_at').defaultTo(knex.fn.now())
      table.string('created_by').references('auth0_id').inTable('users')
      table.integer('views').defaultTo(0)
    })
    .createTable('binder_likes', (table) => {
      table.string('user_id').references('auth0_id').inTable('users')
      table.uuid('binder_id').references('id').inTable('binders').onDelete('CASCADE')
      table.timestamp('time').defaultTo(knex.fn.now())
    })
    .createTable('cards', (table) => {
      table
        .integer('id')
        .primary()
        .comment('this is an integer because the cards already have ids from the ygo api we will use')
      table.string('name')
      table.string('type')
      table.string('frame_type')
      table.string('archetype')
      table.text('description')
      table.integer('attack')
      table.integer('defense')
      table.integer('level')
      table.integer('konami_id')
      table.specificType('card_images', 'integer[]')
      table.specificType('typeline', 'text[]')
      table.specificType('formats', 'text[]')
      table.specificType('card_prices', 'jsonb[]')
      table.specificType('card_sets', 'jsonb[]')
      table.string('race')
      table.string('attribute')
      table.integer('views').defaultTo(0)
      table.jsonb('banlist_info').defaultTo('{}')
    })
    .createTable('cards_in_binders', (table) => {
      table.uuid('id').primary().defaultTo(knex.raw('uuid_generate_v4()'))
      table.uuid('binder_id').references('id').inTable('binders').onDelete('CASCADE')
      table.integer('card_id').references('id').inTable('cards')
      table.string('rarity', 50).defaultTo('common')
      table.enu('edition', ['first_edition', 'unlimited']).defaultTo('unlimited')
    })
    .createTable('articles', (table) => {
      table.uuid('id').primary().defaultTo(knex.raw('uuid_generate_v4()'))
      table.string('title')
      table.text('body')
      table.timestamp('created_at').defaultTo(knex.fn.now())
      table.string('created_by').references('auth0_id').inTable('users')
    })
    .createTable('tags', (table) => {
      table.uuid('id').primary().defaultTo(knex.raw('uuid_generate_v4()'))
      table.string('title').unique().notNullable()
    })
    .createTable('binder_tags', (table) => {
      table.uuid('binder_id').references('id').inTable('binders').onDelete('CASCADE')
      table.uuid('tag_id').references('id').inTable('tags')
    })
    .createTable('binder_images', (table) => {
      table.uuid('id').primary().defaultTo(knex.raw('uuid_generate_v4()'))
      table.string('s3_key')
      table.string('artist')
    })
    .createTable('avatars', (table) => {
      table.uuid('id').primary().defaultTo(knex.raw('uuid_generate_v4()'))
      table.string('s3_key')
      table.string('artist')
    })
    .createTable('permissions', (table) => {
      table.uuid('id').primary().defaultTo(knex.raw('uuid_generate_v4()'))
      table.string('permission_name', 50).unique().notNullable()
    })
    .createTable('role_permissions', (table) => {
      table.uuid('role_id').references('id').inTable('roles').onDelete('CASCADE')
      table.uuid('permission_id').references('id').inTable('permissions').onDelete('CASCADE')
      table.primary(['role_id', 'permission_id'])
    })
    .createTable('user_roles', (table) => {
      table.string('user_id').references('auth0_id').inTable('users').onDelete('CASCADE')
      table.uuid('role_id').references('id').inTable('roles').onDelete('CASCADE')
      table.primary(['user_id', 'role_id'])
    })
    .createTable('db_info', (table) => {
      table.string('downloaded_version')
      table.timestamp('last_updated').defaultTo(knex.fn.now())
    })
}

exports.down = function (knex) {
  return knex.schema
    .dropTableIfExists('db_info')
    .dropTableIfExists('user_roles')
    .dropTableIfExists('role_permissions')
    .dropTableIfExists('permissions')
    .dropTableIfExists('binder_tags')
    .dropTableIfExists('tags')
    .dropTableIfExists('articles')
    .dropTableIfExists('cards_in_binders')
    .dropTableIfExists('cards')
    .dropTableIfExists('binder_likes')
    .dropTableIfExists('binder_views')
    .dropTableIfExists('binder_images')
    .dropTableIfExists('avatars')
    .dropTableIfExists('binders')
    .dropTableIfExists('users')
    .dropTableIfExists('roles')
}
